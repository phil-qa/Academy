import sys
import subprocess
import importlib.util
import os

# Function to check if a package is installed
def is_package_installed(package_name):
    package_spec = importlib.util.find_spec(package_name)
    return package_spec is not None

# Function to install a package using pip
def install_package(package_name):
    print(f"Installing {package_name}...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", package_name])

# List of required packages
required_packages = ["pytsk3", "libewf-python"]

# Check and install required packages
for package in required_packages:
    if not is_package_installed(package):
        install_package(package)

import pytsk3
import libewf

class EwfImgInfo(pytsk3.Img_Info):
    def __init__(self, ewf_handle):
        self._ewf_handle = ewf_handle
        super(EwfImgInfo, self).__init__(url="", type=pytsk3.TSK_IMG_TYPE_EXTERNAL)

    def close(self):
        self._ewf_handle.close()

    def read(self, offset, size):
        self._ewf_handle.seek(offset)
        return self._ewf_handle.read(size)

    def get_size(self):
        return self._ewf_handle.get_media_size()

def open_ewf_image(image_path):
    filenames = libewf.glob(image_path)
    ewf_handle = libewf.handle()
    ewf_handle.open(filenames)
    return ewf_handle

def analyze_volume(image_handle):
    img_info = EwfImgInfo(image_handle)
    volume = pytsk3.Volume_Info(img_info)
    for part in volume:
        print(f"Partition: {part.addr}, Start: {part.start}, Length: {part.len}, Description: {part.desc}")
        analyze_partition(img_info, part.start * volume.info.block_size)

def analyze_partition(img_info, offset):
    try:
        fs_info = pytsk3.FS_Info(img_info, offset=offset)
        root_dir = fs_info.open_dir("/")
        list_files(root_dir)
    except IOError:
        print(f"Cannot open filesystem at offset {offset}")

def list_files(directory, parent_path="/"):
    for entry in directory:
        if entry.info.name.name in [b'.', b'..']:
            continue

        try:
            f_type = entry.info.meta.type
        except AttributeError:
            continue

        file_path = parent_path + entry.info.name.name.decode('utf-8')
        if f_type == pytsk3.TSK_FS_META_TYPE_DIR:
            print(f"Directory: {file_path}")
            sub_directory = entry.as_directory()
            list_files(sub_directory, file_path + "/")
        else:
            print(f"File: {file_path}")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(f"Usage: {sys.argv[0]} <EWF image path>")
        sys.exit(1)

    image_path = sys.argv[1]
    ewf_handle = open_ewf_image(image_path)
    analyze_volume(ewf_handle)
